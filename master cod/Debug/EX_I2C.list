
EX_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003b08  08003b08  00004b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  08003b3c  08003b3c  00004b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b44  08003b44  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003b4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000024  08003b70  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003b70  0000519c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4e5  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  00014539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00016600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  000172d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d95f  00000000  00000000  00017ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e91  00000000  00000000  0003562e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9dab  00000000  00000000  000464bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010026a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  001002b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00103794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003af0 	.word	0x08003af0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08003af0 	.word	0x08003af0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc27 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f853 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f899 	bl	8000650 <MX_I2C1_Init>
  MX_I2C2_Init();
 800051e:	f000 f8d7 	bl	80006d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 faa4 	bl	8000a70 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000528:	2101      	movs	r1, #1
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fad6 	bl	8000adc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000530:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <main+0xa0>)
 8000532:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000536:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <main+0xa0>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <main+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <main+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <main+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000550:	4915      	ldr	r1, [pc, #84]	@ (80005a8 <main+0xa0>)
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fb4e 	bl	8000bf4 <BSP_COM_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <main+0x5a>
  {
    Error_Handler();
 800055e:	f000 f933 	bl	80007c8 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_I2C_Master_Transmit(&hi2c1, i2c_address << 1, &data_to_send, 1, HAL_MAX_DELAY);
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <main+0xa4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	b299      	uxth	r1, r3
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0xa8>)
 8000574:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0xac>)
 8000576:	f001 f82b 	bl	80015d0 <HAL_I2C_Master_Transmit>

      HAL_I2C_Master_Receive(&hi2c1, i2c_address << 1, &received_data, 1, HAL_MAX_DELAY);
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <main+0xa4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <main+0xb0>)
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <main+0xac>)
 800058e:	f001 f937 	bl	8001800 <HAL_I2C_Master_Receive>

	  HAL_Delay(2000);
 8000592:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000596:	f000 fc53 	bl	8000e40 <HAL_Delay>
	  data_to_send = received_data;
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <main+0xb0>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <main+0xa8>)
 80005a0:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c1, i2c_address << 1, &data_to_send, 1, HAL_MAX_DELAY);
 80005a2:	bf00      	nop
 80005a4:	e7dd      	b.n	8000562 <main+0x5a>
 80005a6:	bf00      	nop
 80005a8:	20000044 	.word	0x20000044
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000001 	.word	0x20000001
 80005b4:	20000054 	.word	0x20000054
 80005b8:	20000040 	.word	0x20000040

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	@ 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fa63 	bl	8003a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005de:	2000      	movs	r0, #0
 80005e0:	f001 fd42 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	2303      	movs	r3, #3
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005f6:	2306      	movs	r3, #6
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005fa:	2355      	movs	r3, #85	@ 0x55
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fdde 	bl	80021d0 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800061a:	f000 f8d5 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2104      	movs	r1, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f8dc 	bl	80027f4 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000642:	f000 f8c1 	bl	80007c8 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f000 ff04 	bl	8001498 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 f897 	bl	80007c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f001 fc4b 	bl	8001f38 <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f88e 	bl	80007c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f001 fc8d 	bl	8001fce <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f885 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000054 	.word	0x20000054
 80006c8:	40005400 	.word	0x40005400
 80006cc:	40b285c2 	.word	0x40b285c2

080006d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <MX_I2C2_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <MX_I2C2_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_I2C2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800070a:	480e      	ldr	r0, [pc, #56]	@ (8000744 <MX_I2C2_Init+0x74>)
 800070c:	f000 fec4 	bl	8001498 <HAL_I2C_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000716:	f000 f857 	bl	80007c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <MX_I2C2_Init+0x74>)
 800071e:	f001 fc0b 	bl	8001f38 <HAL_I2CEx_ConfigAnalogFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 f84e 	bl	80007c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_I2C2_Init+0x74>)
 8000730:	f001 fc4d 	bl	8001fce <HAL_I2CEx_ConfigDigitalFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f845 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000a8 	.word	0x200000a8
 8000748:	40005800 	.word	0x40005800
 800074c:	40b285c2 	.word	0x40b285c2

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a1a      	ldr	r2, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0x74>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0x74>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x74>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_GPIO_Init+0x74>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_GPIO_Init+0x74>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <MX_GPIO_Init+0x74>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_GPIO_Init+0x74>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <HAL_MspInit+0x44>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_MspInit+0x44>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800080a:	f001 fcd1 	bl	80021b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09e      	sub	sp, #120	@ 0x78
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	2244      	movs	r2, #68	@ 0x44
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 f92a 	bl	8003a96 <memset>
  if(hi2c->Instance==I2C1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a4c      	ldr	r2, [pc, #304]	@ (8000978 <HAL_I2C_MspInit+0x15c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d137      	bne.n	80008bc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f9e7 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000864:	f7ff ffb0 	bl	80007c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b44      	ldr	r3, [pc, #272]	@ (800097c <HAL_I2C_MspInit+0x160>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	4a43      	ldr	r2, [pc, #268]	@ (800097c <HAL_I2C_MspInit+0x160>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000874:	4b41      	ldr	r3, [pc, #260]	@ (800097c <HAL_I2C_MspInit+0x160>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000880:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000886:	2312      	movs	r3, #18
 8000888:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000892:	2304      	movs	r3, #4
 8000894:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800089a:	4619      	mov	r1, r3
 800089c:	4838      	ldr	r0, [pc, #224]	@ (8000980 <HAL_I2C_MspInit+0x164>)
 800089e:	f000 fc61 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a2:	4b36      	ldr	r3, [pc, #216]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a6:	4a35      	ldr	r2, [pc, #212]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ae:	4b33      	ldr	r3, [pc, #204]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008ba:	e058      	b.n	800096e <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a30      	ldr	r2, [pc, #192]	@ (8000984 <HAL_I2C_MspInit+0x168>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d153      	bne.n	800096e <HAL_I2C_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008c6:	2380      	movs	r3, #128	@ 0x80
 80008c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 f9aa 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_I2C_MspInit+0xc6>
      Error_Handler();
 80008de:	f7ff ff73 	bl	80007c8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <HAL_I2C_MspInit+0x160>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <HAL_I2C_MspInit+0x160>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <HAL_I2C_MspInit+0x160>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000912:	2310      	movs	r3, #16
 8000914:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000922:	2304      	movs	r3, #4
 8000924:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800092a:	4619      	mov	r1, r3
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <HAL_I2C_MspInit+0x16c>)
 800092e:	f000 fc19 	bl	8001164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000936:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000944:	2304      	movs	r3, #4
 8000946:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800094c:	4619      	mov	r1, r3
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f000 fc07 	bl	8001164 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_I2C_MspInit+0x160>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_I2C_MspInit+0x160>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_I2C_MspInit+0x160>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
}
 800096e:	bf00      	nop
 8000970:	3778      	adds	r7, #120	@ 0x78
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40005400 	.word	0x40005400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400
 8000984:	40005800 	.word	0x40005800
 8000988:	48000800 	.word	0x48000800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 fa0f 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f8e2 	bl	8000bb8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f003 f82d 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4e:	f7ff fd5b 	bl	8000508 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a60:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 8000a64:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a68:	2000019c 	.word	0x2000019c

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <BSP_LED_Init+0x64>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a15      	ldr	r2, [pc, #84]	@ (8000ad4 <BSP_LED_Init+0x64>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <BSP_LED_Init+0x64>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000a92:	2320      	movs	r3, #32
 8000a94:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <BSP_LED_Init+0x68>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	f107 020c 	add.w	r2, r7, #12
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fb57 	bl	8001164 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <BSP_LED_Init+0x68>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	2120      	movs	r1, #32
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fcd0 	bl	8001468 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	20000008 	.word	0x20000008

08000adc <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000aec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <BSP_PB_Init+0xc4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <BSP_PB_Init+0xc4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <BSP_PB_Init+0xc4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b08:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10c      	bne.n	8000b32 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ba4 <BSP_PB_Init+0xc8>)
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	f107 020c 	add.w	r2, r7, #12
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fb1a 	bl	8001164 <HAL_GPIO_Init>
 8000b30:	e031      	b.n	8000b96 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <BSP_PB_Init+0xc8>)
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fb0c 	bl	8001164 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <BSP_PB_Init+0xcc>)
 8000b52:	441a      	add	r2, r3
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4915      	ldr	r1, [pc, #84]	@ (8000bac <BSP_PB_Init+0xd0>)
 8000b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4610      	mov	r0, r2
 8000b60:	f000 fabc 	bl	80010dc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <BSP_PB_Init+0xcc>)
 8000b6a:	1898      	adds	r0, r3, r2
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <BSP_PB_Init+0xd4>)
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	461a      	mov	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f000 fa93 	bl	80010a2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b7c:	2028      	movs	r0, #40	@ 0x28
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <BSP_PB_Init+0xd8>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f000 fa56 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b8e:	2328      	movs	r3, #40	@ 0x28
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fa6c 	bl	800106e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	2000000c 	.word	0x2000000c
 8000ba8:	200000fc 	.word	0x200000fc
 8000bac:	08003b20 	.word	0x08003b20
 8000bb0:	20000014 	.word	0x20000014
 8000bb4:	20000018 	.word	0x20000018

08000bb8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <BSP_PB_IRQHandler+0x20>)
 8000bc8:	4413      	add	r3, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fa9a 	bl	8001104 <HAL_EXTI_IRQHandler>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000fc 	.word	0x200000fc

08000bdc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d903      	bls.n	8000c12 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c0a:	f06f 0301 	mvn.w	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e018      	b.n	8000c44 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2294      	movs	r2, #148	@ 0x94
 8000c16:	fb02 f303 	mul.w	r3, r2, r3
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <BSP_COM_Init+0x5c>)
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f852 	bl	8000cc8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2294      	movs	r2, #148	@ 0x94
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <BSP_COM_Init+0x5c>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f80e 	bl	8000c54 <MX_LPUART1_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000c3e:	f06f 0303 	mvn.w	r3, #3
 8000c42:	e000      	b.n	8000c46 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000c44:	68fb      	ldr	r3, [r7, #12]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000104 	.word	0x20000104

08000c54 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_LPUART1_Init+0x60>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	220c      	movs	r2, #12
 8000c72:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	895b      	ldrh	r3, [r3, #10]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	891b      	ldrh	r3, [r3, #8]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	899b      	ldrh	r3, [r3, #12]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ca0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f002 f9b2 	bl	800300c <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000010 	.word	0x20000010

08000cb8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff8d 	bl	8000bdc <BSP_PB_Callback>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <COM1_MspInit+0x94>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <COM1_MspInit+0x94>)
 8000d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d04:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <COM1_MspInit+0x94>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <COM1_MspInit+0x94>)
 8000d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f000 fa15 	bl	8001164 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d42:	230c      	movs	r3, #12
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f000 fa08 	bl	8001164 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f95a 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f80d 	bl	8000d90 <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fd27 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]

}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_InitTick+0x68>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d022      	beq.n	8000dea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_InitTick+0x6c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <HAL_InitTick+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f966 	bl	800108a <HAL_SYSTICK_Config>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10f      	bne.n	8000de4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d809      	bhi.n	8000dde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	f000 f932 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_InitTick+0x70>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	e004      	b.n	8000dee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e001      	b.n	8000dee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000020 	.word	0x20000020
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	2000001c 	.word	0x2000001c

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a03      	ldr	r2, [pc, #12]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	20000198 	.word	0x20000198
 8000e24:	20000020 	.word	0x20000020

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000198 	.word	0x20000198

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d004      	beq.n	8000e64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_Delay+0x40>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e64:	bf00      	nop
 8000e66:	f7ff ffdf 	bl	8000e28 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8f7      	bhi.n	8000e66 <HAL_Delay+0x26>
  {
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000020 	.word	0x20000020

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	@ (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	@ 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff40 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff33 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa4 	bl	8000fe0 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	460b      	mov	r3, r1
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	605a      	str	r2, [r3, #4]
      break;
 80010c0:	e005      	b.n	80010ce <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75fb      	strb	r3, [r7, #23]
      break;
 80010cc:	bf00      	nop
  }

  return status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e003      	b.n	80010f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2201      	movs	r2, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	015a      	lsls	r2, r3, #5
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_EXTI_IRQHandler+0x5c>)
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4798      	blx	r3
    }
  }
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010414 	.word	0x40010414

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001172:	e15a      	b.n	800142a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 814c 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f0:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131a:	d01f      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d019      	beq.n	8001358 <HAL_GPIO_Init+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e4>
 8001344:	2305      	movs	r3, #5
 8001346:	e00a      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001348:	2306      	movs	r3, #6
 800134a:	e008      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800134c:	2304      	movs	r3, #4
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001350:	2303      	movs	r3, #3
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136e:	4937      	ldr	r1, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a30      	ldr	r2, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x300>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f ae9d 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48000c00 	.word	0x48000c00
 800145c:	48001000 	.word	0x48001000
 8001460:	48001400 	.word	0x48001400
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e08d      	b.n	80015c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff f9ac 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e006      	b.n	8001520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800151e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d108      	bne.n	800153a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	e007      	b.n	800154a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800155c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800156c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69d9      	ldr	r1, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	461a      	mov	r2, r3
 80015dc:	460b      	mov	r3, r1
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	4613      	mov	r3, r2
 80015e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	f040 80fd 	bne.w	80017ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x30>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e0f6      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001608:	f7ff fc0e 	bl	8000e28 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2319      	movs	r3, #25
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fa0a 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0e1      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	@ 0x21
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2210      	movs	r2, #16
 8001636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	2bff      	cmp	r3, #255	@ 0xff
 800165a:	d906      	bls.n	800166a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	22ff      	movs	r2, #255	@ 0xff
 8001660:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001662:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e007      	b.n	800167a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001678:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167e:	2b00      	cmp	r3, #0
 8001680:	d024      	beq.n	80016cc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <HAL_I2C_Master_Transmit+0x228>)
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fc05 	bl	8001ed4 <I2C_TransferConfig>
 80016ca:	e066      	b.n	800179a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	8979      	ldrh	r1, [r7, #10]
 80016d4:	4b48      	ldr	r3, [pc, #288]	@ (80017f8 <HAL_I2C_Master_Transmit+0x228>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fbfa 	bl	8001ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016e0:	e05b      	b.n	800179a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	6a39      	ldr	r1, [r7, #32]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f9fd 	bl	8001ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07b      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d034      	beq.n	800179a <HAL_I2C_Master_Transmit+0x1ca>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d130      	bne.n	800179a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	2200      	movs	r2, #0
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f976 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e04d      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2bff      	cmp	r3, #255	@ 0xff
 800175a:	d90e      	bls.n	800177a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	22ff      	movs	r2, #255	@ 0xff
 8001760:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001766:	b2da      	uxtb	r2, r3
 8001768:	8979      	ldrh	r1, [r7, #10]
 800176a:	2300      	movs	r3, #0
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fbae 	bl	8001ed4 <I2C_TransferConfig>
 8001778:	e00f      	b.n	800179a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	8979      	ldrh	r1, [r7, #10]
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fb9d 	bl	8001ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d19e      	bne.n	80016e2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	6a39      	ldr	r1, [r7, #32]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f9e3 	bl	8001b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01a      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_I2C_Master_Transmit+0x22c>)
 80017cc:	400b      	ands	r3, r1
 80017ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
  }
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	80002000 	.word	0x80002000
 80017fc:	fe00e800 	.word	0xfe00e800

08001800 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	460b      	mov	r3, r1
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b20      	cmp	r3, #32
 800181e:	f040 80db 	bne.w	80019d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_I2C_Master_Receive+0x30>
 800182c:	2302      	movs	r3, #2
 800182e:	e0d4      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001838:	f7ff faf6 	bl	8000e28 <HAL_GetTick>
 800183c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2319      	movs	r3, #25
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f8f2 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0bf      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2222      	movs	r2, #34	@ 0x22
 800185e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2210      	movs	r2, #16
 8001866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	893a      	ldrh	r2, [r7, #8]
 800187a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2bff      	cmp	r3, #255	@ 0xff
 800188a:	d90e      	bls.n	80018aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001896:	b2da      	uxtb	r2, r3
 8001898:	8979      	ldrh	r1, [r7, #10]
 800189a:	4b52      	ldr	r3, [pc, #328]	@ (80019e4 <HAL_I2C_Master_Receive+0x1e4>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fb16 	bl	8001ed4 <I2C_TransferConfig>
 80018a8:	e06d      	b.n	8001986 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	8979      	ldrh	r1, [r7, #10]
 80018bc:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <HAL_I2C_Master_Receive+0x1e4>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fb05 	bl	8001ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018ca:	e05c      	b.n	8001986 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	6a39      	ldr	r1, [r7, #32]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f993 	bl	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e07c      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d034      	beq.n	8001986 <HAL_I2C_Master_Receive+0x186>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	d130      	bne.n	8001986 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f880 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e04d      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2bff      	cmp	r3, #255	@ 0xff
 8001946:	d90e      	bls.n	8001966 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	22ff      	movs	r2, #255	@ 0xff
 800194c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001952:	b2da      	uxtb	r2, r3
 8001954:	8979      	ldrh	r1, [r7, #10]
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fab8 	bl	8001ed4 <I2C_TransferConfig>
 8001964:	e00f      	b.n	8001986 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001974:	b2da      	uxtb	r2, r3
 8001976:	8979      	ldrh	r1, [r7, #10]
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 faa7 	bl	8001ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d19d      	bne.n	80018cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	6a39      	ldr	r1, [r7, #32]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f8ed 	bl	8001b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e01a      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2220      	movs	r2, #32
 80019aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_I2C_Master_Receive+0x1e8>)
 80019b8:	400b      	ands	r3, r1
 80019ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	80002400 	.word	0x80002400
 80019e8:	fe00e800 	.word	0xfe00e800

080019ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d103      	bne.n	8001a0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d007      	beq.n	8001a28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	619a      	str	r2, [r3, #24]
  }
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a44:	e03b      	b.n	8001abe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f962 	bl	8001d14 <I2C_IsErrorOccurred>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e041      	b.n	8001ade <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d02d      	beq.n	8001abe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff f9e1 	bl	8000e28 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d122      	bne.n	8001abe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4013      	ands	r3, r2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d113      	bne.n	8001abe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d0b4      	beq.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af2:	e033      	b.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f90b 	bl	8001d14 <I2C_IsErrorOccurred>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e031      	b.n	8001b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d025      	beq.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b10:	f7ff f98a 	bl	8000e28 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d302      	bcc.n	8001b26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11a      	bne.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d013      	beq.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	f043 0220 	orr.w	r2, r3, #32
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e007      	b.n	8001b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d1c4      	bne.n	8001af4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b80:	e02f      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f8c4 	bl	8001d14 <I2C_IsErrorOccurred>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e02d      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b96:	f7ff f947 	bl	8000e28 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d302      	bcc.n	8001bac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11a      	bne.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d013      	beq.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d1c8      	bne.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c0c:	e071      	b.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f87e 	bl	8001d14 <I2C_IsErrorOccurred>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d13b      	bne.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d138      	bne.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d105      	bne.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d121      	bne.n	8001ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	75fb      	strb	r3, [r7, #23]
 8001ca0:	e002      	b.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001ca8:	f7ff f8be 	bl	8000e28 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d302      	bcc.n	8001cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d116      	bne.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d00f      	beq.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d002      	beq.n	8001d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d083      	beq.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	fe00e800 	.word	0xfe00e800

08001d14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d068      	beq.n	8001e12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d48:	e049      	b.n	8001dde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d045      	beq.n	8001dde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f869 	bl	8000e28 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_IsErrorOccurred+0x54>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d13a      	bne.n	8001dde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d8a:	d121      	bne.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d92:	d01d      	beq.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d01a      	beq.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001da8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001daa:	f7ff f83d 	bl	8000e28 <HAL_GetTick>
 8001dae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db0:	e00e      	b.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001db2:	f7ff f839 	bl	8000e28 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b19      	cmp	r3, #25
 8001dbe:	d907      	bls.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dce:	e006      	b.n	8001dde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d1e9      	bne.n	8001db2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d003      	beq.n	8001df4 <I2C_IsErrorOccurred+0xe0>
 8001dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0aa      	beq.n	8001d4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fdaf 	bl	80019ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <I2C_IsErrorOccurred+0x1bc>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3728      	adds	r7, #40	@ 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fe00e800 	.word	0xfe00e800

08001ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	0d5b      	lsrs	r3, r3, #21
 8001f0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <I2C_TransferConfig+0x60>)
 8001f14:	430b      	orrs	r3, r1
 8001f16:	43db      	mvns	r3, r3
 8001f18:	ea02 0103 	and.w	r1, r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	03ff63ff 	.word	0x03ff63ff

08001f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d138      	bne.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e032      	b.n	8001fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	@ 0x24
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e000      	b.n	8001fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fc0:	2302      	movs	r3, #2
  }
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d139      	bne.n	8002058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e033      	b.n	800205a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2224      	movs	r2, #36	@ 0x24
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d141      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002076:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002082:	d131      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002084:	4b47      	ldr	r3, [pc, #284]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800208a:	4a46      	ldr	r2, [pc, #280]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209c:	4a41      	ldr	r2, [pc, #260]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a4:	4b40      	ldr	r3, [pc, #256]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2232      	movs	r2, #50	@ 0x32
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a3f      	ldr	r2, [pc, #252]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ba:	e002      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3b01      	subs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c2:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ce:	d102      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f2      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d6:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d158      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e057      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e8:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ee:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f8:	e04d      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002100:	d141      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210e:	d131      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002120:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002128:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2232      	movs	r2, #50	@ 0x32
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	e002      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d102      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f2      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216e:	d112      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e011      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002184:	e007      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800218e:	4a05      	ldr	r2, [pc, #20]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40007000 	.word	0x40007000
 80021a8:	20000004 	.word	0x20000004
 80021ac:	431bde83 	.word	0x431bde83

080021b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021be:	6093      	str	r3, [r2, #8]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e2fe      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d075      	beq.n	80022da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b97      	ldr	r3, [pc, #604]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b94      	ldr	r3, [pc, #592]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d102      	bne.n	800220e <HAL_RCC_OscConfig+0x3e>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d002      	beq.n	8002214 <HAL_RCC_OscConfig+0x44>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d10b      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	4b8d      	ldr	r3, [pc, #564]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x108>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e2d9      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x74>
 8002236:	4b85      	ldr	r3, [pc, #532]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a84      	ldr	r2, [pc, #528]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b7f      	ldr	r3, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b7c      	ldr	r3, [pc, #496]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7b      	ldr	r2, [pc, #492]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002268:	4b78      	ldr	r3, [pc, #480]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a77      	ldr	r2, [pc, #476]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b75      	ldr	r3, [pc, #468]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a74      	ldr	r2, [pc, #464]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fdce 	bl	8000e28 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fdca 	bl	8000e28 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e29e      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xc0>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fdba 	bl	8000e28 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe fdb6 	bl	8000e28 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e28a      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	4b60      	ldr	r3, [pc, #384]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0xe8>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d075      	beq.n	80023d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e6:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f0:	4b56      	ldr	r3, [pc, #344]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_OscConfig+0x136>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d002      	beq.n	800230c <HAL_RCC_OscConfig+0x13c>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d11f      	bne.n	800234c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x154>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e25d      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b49      	ldr	r3, [pc, #292]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4946      	ldr	r1, [pc, #280]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002338:	4b45      	ldr	r3, [pc, #276]	@ (8002450 <HAL_RCC_OscConfig+0x280>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fd27 	bl	8000d90 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d043      	beq.n	80023d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e249      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3c      	ldr	r2, [pc, #240]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fd62 	bl	8000e28 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fd5e 	bl	8000e28 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e232      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b31      	ldr	r3, [pc, #196]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	492d      	ldr	r1, [pc, #180]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
 800239a:	e01a      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80023a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fd3e 	bl	8000e28 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe fd3a 	bl	8000e28 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e20e      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c2:	4b22      	ldr	r3, [pc, #136]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1e0>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d041      	beq.n	8002462 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01c      	beq.n	8002420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80023e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ec:	4a17      	ldr	r2, [pc, #92]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fd17 	bl	8000e28 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe fd13 	bl	8000e28 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1e7      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ef      	beq.n	80023fe <HAL_RCC_OscConfig+0x22e>
 800241e:	e020      	b.n	8002462 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002426:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_RCC_OscConfig+0x27c>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fcfa 	bl	8000e28 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002436:	e00d      	b.n	8002454 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fcf6 	bl	8000e28 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d906      	bls.n	8002454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1ca      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002454:	4b8c      	ldr	r3, [pc, #560]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ea      	bne.n	8002438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a6 	beq.w	80025bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002474:	4b84      	ldr	r3, [pc, #528]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x2b4>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x2b6>
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	4a7e      	ldr	r2, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	@ 0x58
 8002496:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b79      	ldr	r3, [pc, #484]	@ (800268c <HAL_RCC_OscConfig+0x4bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b2:	4b76      	ldr	r3, [pc, #472]	@ (800268c <HAL_RCC_OscConfig+0x4bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a75      	ldr	r2, [pc, #468]	@ (800268c <HAL_RCC_OscConfig+0x4bc>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe fcb3 	bl	8000e28 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe fcaf 	bl	8000e28 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e183      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d8:	4b6c      	ldr	r3, [pc, #432]	@ (800268c <HAL_RCC_OscConfig+0x4bc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_RCC_OscConfig+0x32e>
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	4a65      	ldr	r2, [pc, #404]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fc:	e024      	b.n	8002548 <HAL_RCC_OscConfig+0x378>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d110      	bne.n	8002528 <HAL_RCC_OscConfig+0x358>
 8002506:	4b60      	ldr	r3, [pc, #384]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	4a5e      	ldr	r2, [pc, #376]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002516:	4b5c      	ldr	r3, [pc, #368]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	4a5a      	ldr	r2, [pc, #360]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002526:	e00f      	b.n	8002548 <HAL_RCC_OscConfig+0x378>
 8002528:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002538:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fc6a 	bl	8000e28 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fc66 	bl	8000e28 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e138      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ed      	beq.n	8002558 <HAL_RCC_OscConfig+0x388>
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fc53 	bl	8000e28 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fc4f 	bl	8000e28 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e121      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259c:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ed      	bne.n	8002586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	4a34      	ldr	r2, [pc, #208]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03c      	beq.n	8002642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fc22 	bl	8000e28 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e8:	f7fe fc1e 	bl	8000e28 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0f2      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025fa:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x418>
 8002608:	e01b      	b.n	8002642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002610:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fc05 	bl	8000e28 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002622:	f7fe fc01 	bl	8000e28 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d5      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ef      	bne.n	8002622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80c9 	beq.w	80027de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264c:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b0c      	cmp	r3, #12
 8002656:	f000 8083 	beq.w	8002760 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d15e      	bne.n	8002720 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a08      	ldr	r2, [pc, #32]	@ (8002688 <HAL_RCC_OscConfig+0x4b8>)
 8002668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fbdb 	bl	8000e28 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002674:	e00c      	b.n	8002690 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fbd7 	bl	8000e28 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d905      	bls.n	8002690 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0ab      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002690:	4b55      	ldr	r3, [pc, #340]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ec      	bne.n	8002676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4b52      	ldr	r3, [pc, #328]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4b52      	ldr	r3, [pc, #328]	@ (80027ec <HAL_RCC_OscConfig+0x61c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6a11      	ldr	r1, [r2, #32]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026b6:	0212      	lsls	r2, r2, #8
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026be:	0852      	lsrs	r2, r2, #1
 80026c0:	3a01      	subs	r2, #1
 80026c2:	0552      	lsls	r2, r2, #21
 80026c4:	4311      	orrs	r1, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026ca:	0852      	lsrs	r2, r2, #1
 80026cc:	3a01      	subs	r2, #1
 80026ce:	0652      	lsls	r2, r2, #25
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026d6:	06d2      	lsls	r2, r2, #27
 80026d8:	430a      	orrs	r2, r1
 80026da:	4943      	ldr	r1, [pc, #268]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e0:	4b41      	ldr	r3, [pc, #260]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a40      	ldr	r2, [pc, #256]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 80026e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ec:	4b3e      	ldr	r3, [pc, #248]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a3d      	ldr	r2, [pc, #244]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fb96 	bl	8000e28 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fb92 	bl	8000e28 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e066      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x530>
 800271e:	e05e      	b.n	80027de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a30      	ldr	r2, [pc, #192]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fb7c 	bl	8000e28 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fb78 	bl	8000e28 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e04c      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002746:	4b28      	ldr	r3, [pc, #160]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002752:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	4924      	ldr	r1, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 8002758:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_RCC_OscConfig+0x620>)
 800275a:	4013      	ands	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
 800275e:	e03e      	b.n	80027de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e039      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800276c:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <HAL_RCC_OscConfig+0x618>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d12c      	bne.n	80027da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	3b01      	subs	r3, #1
 800278c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d123      	bne.n	80027da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11b      	bne.n	80027da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d113      	bne.n	80027da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d109      	bne.n	80027da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	019f800c 	.word	0x019f800c
 80027f0:	feeefffc 	.word	0xfeeefffc

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e11e      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b91      	ldr	r3, [pc, #580]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b8e      	ldr	r3, [pc, #568]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	498c      	ldr	r1, [pc, #560]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e106      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d073      	beq.n	8002930 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d129      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002850:	4b81      	ldr	r3, [pc, #516]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0f4      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002860:	f000 f99e 	bl	8002ba0 <RCC_GetSysClockFreqFromPLLSource>
 8002864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4a7c      	ldr	r2, [pc, #496]	@ (8002a5c <HAL_RCC_ClockConfig+0x268>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d93f      	bls.n	80028ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800286e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	d033      	beq.n	80028ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12f      	bne.n	80028ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800288e:	4b72      	ldr	r3, [pc, #456]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002896:	4a70      	ldr	r2, [pc, #448]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e024      	b.n	80028ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0c6      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028bc:	4b66      	ldr	r3, [pc, #408]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0be      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028cc:	f000 f8ce 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4a61      	ldr	r2, [pc, #388]	@ (8002a5c <HAL_RCC_ClockConfig+0x268>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d909      	bls.n	80028ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028da:	4b5f      	ldr	r3, [pc, #380]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4957      	ldr	r1, [pc, #348]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe fa92 	bl	8000e28 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe fa8e 	bl	8000e28 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e095      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b43      	ldr	r3, [pc, #268]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a42      	ldr	r2, [pc, #264]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 800294e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002952:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002960:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002968:	4a3b      	ldr	r2, [pc, #236]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 800296a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800296e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4936      	ldr	r1, [pc, #216]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
 8002982:	e008      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d105      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800298a:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4a32      	ldr	r2, [pc, #200]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002994:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002996:	4b2f      	ldr	r3, [pc, #188]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d21d      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 020f 	bic.w	r2, r3, #15
 80029ac:	4929      	ldr	r1, [pc, #164]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fa38 	bl	8000e28 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fa34 	bl	8000e28 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e03b      	b.n	8002a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1ed      	bne.n	80029bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4917      	ldr	r1, [pc, #92]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490f      	ldr	r1, [pc, #60]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1e:	f000 f825 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <HAL_RCC_ClockConfig+0x26c>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <HAL_RCC_ClockConfig+0x270>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x274>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9a4 	bl	8000d90 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	04c4b400 	.word	0x04c4b400
 8002a60:	08003b08 	.word	0x08003b08
 8002a64:	20000004 	.word	0x20000004
 8002a68:	2000001c 	.word	0x2000001c

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a72:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	e047      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a90:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e03e      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a96:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d136      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aa2:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	4a16      	ldr	r2, [pc, #88]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	68d2      	ldr	r2, [r2, #12]
 8002acc:	0a12      	lsrs	r2, r2, #8
 8002ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
      break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ada:	4a13      	ldr	r2, [pc, #76]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	4a10      	ldr	r2, [pc, #64]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	0a12      	lsrs	r2, r2, #8
 8002ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
      break;
 8002af2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0e5b      	lsrs	r3, r3, #25
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	3301      	adds	r3, #1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	e001      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b14:	693b      	ldr	r3, [r7, #16]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	00f42400 	.word	0x00f42400
 8002b2c:	016e3600 	.word	0x016e3600

08002b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b4c:	f7ff fff0 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08003b18 	.word	0x08003b18

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b78:	f7ff ffda 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0adb      	lsrs	r3, r3, #11
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4904      	ldr	r1, [pc, #16]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08003b18 	.word	0x08003b18

08002ba0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d10c      	bne.n	8002bde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bc4:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bce:	68d2      	ldr	r2, [r2, #12]
 8002bd0:	0a12      	lsrs	r2, r2, #8
 8002bd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	617b      	str	r3, [r7, #20]
    break;
 8002bdc:	e00c      	b.n	8002bf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bde:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	0a12      	lsrs	r2, r2, #8
 8002bec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]
    break;
 8002bf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0e5b      	lsrs	r3, r3, #25
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	3301      	adds	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c12:	687b      	ldr	r3, [r7, #4]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40021000 	.word	0x40021000
 8002c24:	016e3600 	.word	0x016e3600
 8002c28:	00f42400 	.word	0x00f42400

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c34:	2300      	movs	r3, #0
 8002c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8098 	beq.w	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b40      	ldr	r3, [pc, #256]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c66:	4b3d      	ldr	r3, [pc, #244]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c76:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a39      	ldr	r2, [pc, #228]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c82:	f7fe f8d1 	bl	8000e28 <HAL_GetTick>
 8002c86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c88:	e009      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe f8cd 	bl	8000e28 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c9c:	e005      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c9e:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ef      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d159      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01e      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d019      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cde:	4a1f      	ldr	r2, [pc, #124]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	4a1b      	ldr	r2, [pc, #108]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf8:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f88d 	bl	8000e28 <HAL_GetTick>
 8002d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d10:	e00b      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe f889 	bl	8000e28 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d902      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	74fb      	strb	r3, [r7, #19]
            break;
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ec      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d54:	e008      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	74bb      	strb	r3, [r7, #18]
 8002d5a:	e005      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d68:	7c7b      	ldrb	r3, [r7, #17]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4ba6      	ldr	r3, [pc, #664]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	4aa5      	ldr	r2, [pc, #660]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d86:	4ba0      	ldr	r3, [pc, #640]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	499c      	ldr	r1, [pc, #624]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da8:	4b97      	ldr	r3, [pc, #604]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 020c 	bic.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4994      	ldr	r1, [pc, #592]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dca:	4b8f      	ldr	r3, [pc, #572]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	498b      	ldr	r1, [pc, #556]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dec:	4b86      	ldr	r3, [pc, #536]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4983      	ldr	r1, [pc, #524]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	497a      	ldr	r1, [pc, #488]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e30:	4b75      	ldr	r3, [pc, #468]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	4972      	ldr	r1, [pc, #456]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b6d      	ldr	r3, [pc, #436]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4969      	ldr	r1, [pc, #420]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e74:	4b64      	ldr	r3, [pc, #400]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4961      	ldr	r1, [pc, #388]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e96:	4b5c      	ldr	r3, [pc, #368]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	4958      	ldr	r1, [pc, #352]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb8:	4b53      	ldr	r3, [pc, #332]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	4950      	ldr	r1, [pc, #320]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a4a      	ldr	r2, [pc, #296]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ef0:	4b45      	ldr	r3, [pc, #276]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	4942      	ldr	r1, [pc, #264]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f28:	4b37      	ldr	r3, [pc, #220]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4934      	ldr	r1, [pc, #208]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f46:	d105      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f48:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f60:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	4926      	ldr	r1, [pc, #152]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f80:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	4918      	ldr	r1, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	490a      	ldr	r1, [pc, #40]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e042      	b.n	80030a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f83b 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2224      	movs	r2, #36	@ 0x24
 800303a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fafe 	bl	8003658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f82f 	bl	80030c0 <UART_SetConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01b      	b.n	80030a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb7d 	bl	800379c <UART_CheckIdleState>
 80030a2:	4603      	mov	r3, r0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b08c      	sub	sp, #48	@ 0x30
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	431a      	orrs	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4bab      	ldr	r3, [pc, #684]	@ (800339c <UART_SetConfig+0x2dc>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4aa0      	ldr	r2, [pc, #640]	@ (80033a0 <UART_SetConfig+0x2e0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003128:	4313      	orrs	r3, r2
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003136:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003140:	430b      	orrs	r3, r1
 8003142:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f023 010f 	bic.w	r1, r3, #15
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a91      	ldr	r2, [pc, #580]	@ (80033a4 <UART_SetConfig+0x2e4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d125      	bne.n	80031b0 <UART_SetConfig+0xf0>
 8003164:	4b90      	ldr	r3, [pc, #576]	@ (80033a8 <UART_SetConfig+0x2e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d81a      	bhi.n	80031a8 <UART_SetConfig+0xe8>
 8003172:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <UART_SetConfig+0xb8>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	08003189 	.word	0x08003189
 800317c:	08003199 	.word	0x08003199
 8003180:	08003191 	.word	0x08003191
 8003184:	080031a1 	.word	0x080031a1
 8003188:	2301      	movs	r3, #1
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800318e:	e0d6      	b.n	800333e <UART_SetConfig+0x27e>
 8003190:	2302      	movs	r3, #2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003196:	e0d2      	b.n	800333e <UART_SetConfig+0x27e>
 8003198:	2304      	movs	r3, #4
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319e:	e0ce      	b.n	800333e <UART_SetConfig+0x27e>
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e0ca      	b.n	800333e <UART_SetConfig+0x27e>
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e0c6      	b.n	800333e <UART_SetConfig+0x27e>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7d      	ldr	r2, [pc, #500]	@ (80033ac <UART_SetConfig+0x2ec>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d138      	bne.n	800322c <UART_SetConfig+0x16c>
 80031ba:	4b7b      	ldr	r3, [pc, #492]	@ (80033a8 <UART_SetConfig+0x2e8>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d82d      	bhi.n	8003224 <UART_SetConfig+0x164>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <UART_SetConfig+0x110>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003205 	.word	0x08003205
 80031d4:	08003225 	.word	0x08003225
 80031d8:	08003225 	.word	0x08003225
 80031dc:	08003225 	.word	0x08003225
 80031e0:	08003215 	.word	0x08003215
 80031e4:	08003225 	.word	0x08003225
 80031e8:	08003225 	.word	0x08003225
 80031ec:	08003225 	.word	0x08003225
 80031f0:	0800320d 	.word	0x0800320d
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003225 	.word	0x08003225
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800321d 	.word	0x0800321d
 8003204:	2300      	movs	r3, #0
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320a:	e098      	b.n	800333e <UART_SetConfig+0x27e>
 800320c:	2302      	movs	r3, #2
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003212:	e094      	b.n	800333e <UART_SetConfig+0x27e>
 8003214:	2304      	movs	r3, #4
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321a:	e090      	b.n	800333e <UART_SetConfig+0x27e>
 800321c:	2308      	movs	r3, #8
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003222:	e08c      	b.n	800333e <UART_SetConfig+0x27e>
 8003224:	2310      	movs	r3, #16
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e088      	b.n	800333e <UART_SetConfig+0x27e>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5f      	ldr	r2, [pc, #380]	@ (80033b0 <UART_SetConfig+0x2f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d125      	bne.n	8003282 <UART_SetConfig+0x1c2>
 8003236:	4b5c      	ldr	r3, [pc, #368]	@ (80033a8 <UART_SetConfig+0x2e8>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003240:	2b30      	cmp	r3, #48	@ 0x30
 8003242:	d016      	beq.n	8003272 <UART_SetConfig+0x1b2>
 8003244:	2b30      	cmp	r3, #48	@ 0x30
 8003246:	d818      	bhi.n	800327a <UART_SetConfig+0x1ba>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d00a      	beq.n	8003262 <UART_SetConfig+0x1a2>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d814      	bhi.n	800327a <UART_SetConfig+0x1ba>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <UART_SetConfig+0x19a>
 8003254:	2b10      	cmp	r3, #16
 8003256:	d008      	beq.n	800326a <UART_SetConfig+0x1aa>
 8003258:	e00f      	b.n	800327a <UART_SetConfig+0x1ba>
 800325a:	2300      	movs	r3, #0
 800325c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003260:	e06d      	b.n	800333e <UART_SetConfig+0x27e>
 8003262:	2302      	movs	r3, #2
 8003264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003268:	e069      	b.n	800333e <UART_SetConfig+0x27e>
 800326a:	2304      	movs	r3, #4
 800326c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003270:	e065      	b.n	800333e <UART_SetConfig+0x27e>
 8003272:	2308      	movs	r3, #8
 8003274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003278:	e061      	b.n	800333e <UART_SetConfig+0x27e>
 800327a:	2310      	movs	r3, #16
 800327c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003280:	e05d      	b.n	800333e <UART_SetConfig+0x27e>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4b      	ldr	r2, [pc, #300]	@ (80033b4 <UART_SetConfig+0x2f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d125      	bne.n	80032d8 <UART_SetConfig+0x218>
 800328c:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <UART_SetConfig+0x2e8>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003296:	2bc0      	cmp	r3, #192	@ 0xc0
 8003298:	d016      	beq.n	80032c8 <UART_SetConfig+0x208>
 800329a:	2bc0      	cmp	r3, #192	@ 0xc0
 800329c:	d818      	bhi.n	80032d0 <UART_SetConfig+0x210>
 800329e:	2b80      	cmp	r3, #128	@ 0x80
 80032a0:	d00a      	beq.n	80032b8 <UART_SetConfig+0x1f8>
 80032a2:	2b80      	cmp	r3, #128	@ 0x80
 80032a4:	d814      	bhi.n	80032d0 <UART_SetConfig+0x210>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <UART_SetConfig+0x1f0>
 80032aa:	2b40      	cmp	r3, #64	@ 0x40
 80032ac:	d008      	beq.n	80032c0 <UART_SetConfig+0x200>
 80032ae:	e00f      	b.n	80032d0 <UART_SetConfig+0x210>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032b6:	e042      	b.n	800333e <UART_SetConfig+0x27e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032be:	e03e      	b.n	800333e <UART_SetConfig+0x27e>
 80032c0:	2304      	movs	r3, #4
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c6:	e03a      	b.n	800333e <UART_SetConfig+0x27e>
 80032c8:	2308      	movs	r3, #8
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ce:	e036      	b.n	800333e <UART_SetConfig+0x27e>
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d6:	e032      	b.n	800333e <UART_SetConfig+0x27e>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a30      	ldr	r2, [pc, #192]	@ (80033a0 <UART_SetConfig+0x2e0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12a      	bne.n	8003338 <UART_SetConfig+0x278>
 80032e2:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <UART_SetConfig+0x2e8>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032f0:	d01a      	beq.n	8003328 <UART_SetConfig+0x268>
 80032f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032f6:	d81b      	bhi.n	8003330 <UART_SetConfig+0x270>
 80032f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032fc:	d00c      	beq.n	8003318 <UART_SetConfig+0x258>
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003302:	d815      	bhi.n	8003330 <UART_SetConfig+0x270>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <UART_SetConfig+0x250>
 8003308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330c:	d008      	beq.n	8003320 <UART_SetConfig+0x260>
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x270>
 8003310:	2300      	movs	r3, #0
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003316:	e012      	b.n	800333e <UART_SetConfig+0x27e>
 8003318:	2302      	movs	r3, #2
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800331e:	e00e      	b.n	800333e <UART_SetConfig+0x27e>
 8003320:	2304      	movs	r3, #4
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003326:	e00a      	b.n	800333e <UART_SetConfig+0x27e>
 8003328:	2308      	movs	r3, #8
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e006      	b.n	800333e <UART_SetConfig+0x27e>
 8003330:	2310      	movs	r3, #16
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e002      	b.n	800333e <UART_SetConfig+0x27e>
 8003338:	2310      	movs	r3, #16
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <UART_SetConfig+0x2e0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 80a8 	bne.w	800349a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800334a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800334e:	2b08      	cmp	r3, #8
 8003350:	d834      	bhi.n	80033bc <UART_SetConfig+0x2fc>
 8003352:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <UART_SetConfig+0x298>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	0800337d 	.word	0x0800337d
 800335c:	080033bd 	.word	0x080033bd
 8003360:	08003385 	.word	0x08003385
 8003364:	080033bd 	.word	0x080033bd
 8003368:	0800338b 	.word	0x0800338b
 800336c:	080033bd 	.word	0x080033bd
 8003370:	080033bd 	.word	0x080033bd
 8003374:	080033bd 	.word	0x080033bd
 8003378:	08003393 	.word	0x08003393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800337c:	f7ff fbe4 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8003380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003382:	e021      	b.n	80033c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <UART_SetConfig+0x2f8>)
 8003386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003388:	e01e      	b.n	80033c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338a:	f7ff fb6f 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 800338e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003390:	e01a      	b.n	80033c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003398:	e016      	b.n	80033c8 <UART_SetConfig+0x308>
 800339a:	bf00      	nop
 800339c:	cfff69f3 	.word	0xcfff69f3
 80033a0:	40008000 	.word	0x40008000
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40004400 	.word	0x40004400
 80033b0:	40004800 	.word	0x40004800
 80033b4:	40004c00 	.word	0x40004c00
 80033b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 812a 	beq.w	8003624 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	4a9e      	ldr	r2, [pc, #632]	@ (8003650 <UART_SetConfig+0x590>)
 80033d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033da:	461a      	mov	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d305      	bcc.n	8003400 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d903      	bls.n	8003408 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003406:	e10d      	b.n	8003624 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	2200      	movs	r2, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	60fa      	str	r2, [r7, #12]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	4a8e      	ldr	r2, [pc, #568]	@ (8003650 <UART_SetConfig+0x590>)
 8003416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800341a:	b29b      	uxth	r3, r3
 800341c:	2200      	movs	r2, #0
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800342a:	f7fc fef5 	bl	8000218 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	020b      	lsls	r3, r1, #8
 8003440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003444:	0202      	lsls	r2, r0, #8
 8003446:	6979      	ldr	r1, [r7, #20]
 8003448:	6849      	ldr	r1, [r1, #4]
 800344a:	0849      	lsrs	r1, r1, #1
 800344c:	2000      	movs	r0, #0
 800344e:	460c      	mov	r4, r1
 8003450:	4605      	mov	r5, r0
 8003452:	eb12 0804 	adds.w	r8, r2, r4
 8003456:	eb43 0905 	adc.w	r9, r3, r5
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	469a      	mov	sl, r3
 8003462:	4693      	mov	fp, r2
 8003464:	4652      	mov	r2, sl
 8003466:	465b      	mov	r3, fp
 8003468:	4640      	mov	r0, r8
 800346a:	4649      	mov	r1, r9
 800346c:	f7fc fed4 	bl	8000218 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800347e:	d308      	bcc.n	8003492 <UART_SetConfig+0x3d2>
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003486:	d204      	bcs.n	8003492 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	e0c8      	b.n	8003624 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003498:	e0c4      	b.n	8003624 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a2:	d167      	bne.n	8003574 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80034a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d828      	bhi.n	80034fe <UART_SetConfig+0x43e>
 80034ac:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <UART_SetConfig+0x3f4>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034ef 	.word	0x080034ef
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ff 	.word	0x080034ff
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d8:	f7ff fb36 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 80034dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034de:	e014      	b.n	800350a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7ff fb48 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 80034e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e6:	e010      	b.n	800350a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003654 <UART_SetConfig+0x594>)
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034ec:	e00d      	b.n	800350a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7ff fabd 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 80034f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034f4:	e009      	b.n	800350a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034fc:	e005      	b.n	800350a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003508:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8089 	beq.w	8003624 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	4a4e      	ldr	r2, [pc, #312]	@ (8003650 <UART_SetConfig+0x590>)
 8003518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800351c:	461a      	mov	r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	fbb3 f3f2 	udiv	r3, r3, r2
 8003524:	005a      	lsls	r2, r3, #1
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	441a      	add	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d916      	bls.n	800356c <UART_SetConfig+0x4ac>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d212      	bcs.n	800356c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f023 030f 	bic.w	r3, r3, #15
 800354e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b29a      	uxth	r2, r3
 800355c:	8bfb      	ldrh	r3, [r7, #30]
 800355e:	4313      	orrs	r3, r2
 8003560:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	8bfa      	ldrh	r2, [r7, #30]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e05b      	b.n	8003624 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003572:	e057      	b.n	8003624 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003574:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003578:	2b08      	cmp	r3, #8
 800357a:	d828      	bhi.n	80035ce <UART_SetConfig+0x50e>
 800357c:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <UART_SetConfig+0x4c4>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035cf 	.word	0x080035cf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7ff face 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 80035ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035ae:	e014      	b.n	80035da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7ff fae0 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 80035b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035b6:	e010      	b.n	80035da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <UART_SetConfig+0x594>)
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035bc:	e00d      	b.n	80035da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7ff fa55 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035c4:	e009      	b.n	80035da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035cc:	e005      	b.n	80035da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035d8:	bf00      	nop
    }

    if (pclk != 0U)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <UART_SetConfig+0x590>)
 80035e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	441a      	add	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	d909      	bls.n	800361e <UART_SetConfig+0x55e>
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003610:	d205      	bcs.n	800361e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	b29a      	uxth	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e002      	b.n	8003624 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2201      	movs	r2, #1
 8003628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2201      	movs	r2, #1
 8003630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003640:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003644:	4618      	mov	r0, r3
 8003646:	3730      	adds	r7, #48	@ 0x30
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364e:	bf00      	nop
 8003650:	08003b24 	.word	0x08003b24
 8003654:	00f42400 	.word	0x00f42400

08003658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01a      	beq.n	800376e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003756:	d10a      	bne.n	800376e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b098      	sub	sp, #96	@ 0x60
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037ac:	f7fd fb3c 	bl	8000e28 <HAL_GetTick>
 80037b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d12f      	bne.n	8003820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f88e 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e6      	bne.n	80037da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e063      	b.n	80038e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d149      	bne.n	80038c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f857 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03c      	beq.n	80038c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	623b      	str	r3, [r7, #32]
   return(result);
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003866:	633b      	str	r3, [r7, #48]	@ 0x30
 8003868:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800386c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	60fb      	str	r3, [r7, #12]
   return(result);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3308      	adds	r3, #8
 8003898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	617b      	str	r3, [r7, #20]
   return(result);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e012      	b.n	80038e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3758      	adds	r7, #88	@ 0x58
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	e04f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d04b      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd fa8d 	bl	8000e28 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <UART_WaitOnFlagUntilTimeout+0x30>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e04e      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d037      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b80      	cmp	r3, #128	@ 0x80
 8003936:	d034      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d031      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d110      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f838 	bl	80039ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2208      	movs	r2, #8
 800395e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e029      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397c:	d111      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f81e 	bl	80039ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00f      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0a0      	beq.n	8003902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b095      	sub	sp, #84	@ 0x54
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3308      	adds	r3, #8
 8003a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e3      	bne.n	8003a04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d118      	bne.n	8003a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0310 	bic.w	r3, r3, #16
 8003a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a8a:	bf00      	nop
 8003a8c:	3754      	adds	r7, #84	@ 0x54
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <memset>:
 8003a96:	4402      	add	r2, r0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <memset+0xa>
 8003a9e:	4770      	bx	lr
 8003aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa4:	e7f9      	b.n	8003a9a <memset+0x4>
	...

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	@ (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 f818 	bl	8003af0 <_init>
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003b44 	.word	0x08003b44
 8003ae4:	08003b44 	.word	0x08003b44
 8003ae8:	08003b44 	.word	0x08003b44
 8003aec:	08003b48 	.word	0x08003b48

08003af0 <_init>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr

08003afc <_fini>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr
